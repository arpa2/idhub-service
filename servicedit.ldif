# DIT example for Service Directory.
#
# We use a Service Directory to collect configuration data in a
# tree that first sorts out the service and only then splits into
# domains hosted by services.  This file demonstrates by example
# how the general top structure works, and how it breaks down into
# description of individual service.
#
# Note the structural distinction relative to the Global Directory,
# which first splits out domains (with separate domainComponenent
# RDNs even) before turning to the various things underneath it.
# The Global Directory is meant for sharing public data under a
# domain (which holds SRV records pointing to an LDAP server) and
# this is not true for the Service Directory.  The purpose of the
# Service Directory is to offer information to service providers
# on a need-to-know basis.  These can subscribe to the subtree
# for their configuration data, without seeing the same from other
# processes.  We consider it the "shared database" between the
# hosting provider and a plugged-in service provider, though the
# precise link between those parties has not materialised into
# full specifications yet.
#
# The concrete service shown below is the IdentityHub, so the
# component used in the InternetWide Infrastructure to manage
# rights to access their LDAP root node
#

# The root of the Service Directory indicates clearly that it falls
# under the structural reign of the InternetWide Organisation.  It
# informatively references a few sites and domains, to service those
# who poke around the DIT.
#
# It may seem a bit awkward to have an organizationalUnit as the
# root component; still, it makes sense in that it is a unit that
# we consider to span across many organisations.  It also helps
# to have a distinct top-level that is unlikely to interfere with
# already defined database roots in directory servers.
#
# Readable to all service providers.
#
dn: ou=ServiceDIT
ou: ServiceDIT
ou: Service Directory
ou: InternetWide ServiceDIT
ou: InternetWide Service Directory
objectClass: organizationalUnit
objectClass: labeledURIObject
objectClass: domainRelatedObject
description: Service Directory for InternetWide Architecture
labeledURI: http://internetwide.org Blog and Project Description
labeledURI: http://arpa2.net ARPA2 Umbrella for Partial Projects
labeledURI: http://arpa2.org ARPA2 Umbrella for Project Infrastrucutre
labeledURI: https://github.com/arpa2 ARPA2 Software Repositories
associatedDomain: internetwide.org
associatedDomain: arpa2.net
associatedDomain: arpa2.org

# The second level lists service providers, whose name we mandate to
# take the form of a domain name, because that constitutes a unique
# identifier.  The objectClass at this level is standardised, and it
# is a good idea to incorporate contact information at this point, as
# a way for an identity provider to get in touch with the service
# provider.  Since these records are not published, it is not a direct
# threat of workload to publish technical people here; this information
# is not meant for consumption by the end user / domain owner.  It is
# a good idea to include references to the website of the service
# provider.  Service description links and contact details however,
# are best placed one level down, as companies may start off with
# just one service, but are likely to add more as they go.
#
# Readable only to the service provider who binds to this node.
# Writeable to the same service provider.
#
# Created and Deleted as the user plugs in, or removes a service.
# Initial details are provided by the plugin description handed over
# by the prospective service provider.
#
# The example given below is made for internal use by InternetWide
# components, such as the IdentityHub.  It is bound to be present
# in each identity provider's Service Directory.
#
dn: o=internetwide.org,ou=ServiceDIT
o: internetwide.org
o: InternetWide Organisation
o: InternetWide
objectClass: organization
objectClass: labeledURIObject
objectClass: domainRelatedObject
description: IdentityHub Component of the InternetWide Architecture
description: Authorisation details: users, groups, memberships, ...
telephoneNumber: +3123456789
labeledURI: http://internetwide.org Blog and Project Description
labeledURI: http://internetwide.org/tag/architecture.html InternetWide Architecture
associatedDomain: internetwide.org
associatedDomain: arpa2.net
associatedDomain: arpa2.org

# The third level holds the services provided by a service provider.
# These can be named as they like, where the only need is to keep
# them unique under their service provider (domain) name.  The form
# of the object is always an organizationalUnit.  Contact details
# are once again useful, in this case with specific contacts for the
# described service.  It also helps to have website links to the
# specific service.
#
# Readable only to the service provider who binds to the node above
# this one.  Writeable to the same service provider.
#
# Created and Deleted as the user plugs in, or removes a service.
# Initial details are provided by the plugin description handed over
# by the prospective service provider.
#
# The example given below is made for internal use by InternetWide
# components, such as the IdentityHub.  It is bound to be present
# in each identity provider's Service Directory.
#
dn: ou=IdentityHub,o=internetwide.org,ou=ServiceDIT
ou: IdentityHub
objectClass: organizationalUnit
objectClass: labeledURIObject
description: IdentityHub administration, Service Directory
labeledURI: https://github.com/arpa2/idhub-service
labeledURI: http://internetwide.org/tag/identity.html Identity under the InternetWide Architecture

# The fourth level lists the domain names of the various users.
# It is part of the protocol of plugging services into domains
# that these services will collate such domains.  The result is
# the it is easy for service providers to iterate over customer
# domains and the accompanying configuration details.
#
# Domain owners are encouraged to provide contact details for
# use by the service provider in case of problems.  These details
# may be service-specific, leading to an expert contact in a
# large organisation, or they may be the same for all services.
# 
# Readable only to the service provider who binds to this node.
# Writeable by the identity provider.
#
dn: associatedDomain=example.com,ou=IdentityHub,o=internetwide.org,ou=ServiceDIT
associatedDomain: example.com
objectClass: organization
objectClass: domainRelatedObject
o: Example Corporation
telephoneNumber: +3123456789

# The fifth level and below change from prescribed to free form.
#
# The example outlined below is specific for the IdentityHub,
# which needs to be aware of users, groups, roles as well as
# their linkage through pseudonyms (pointed at with seeAlso),
# aliases (user nodes under users), memberships (bidirectional
# linkage between a group and a user or aliase), role occupants
# (bidirectional linkage between a role and a user or alias).
#
# The nodes below provide examples of meaningful relations for
# use in the IdentityHub.

# User "john", general name "John Doe".
# Mutual seeAlso attributes refer to pseudonym "jojo" in the laziest
# manner possible, namely with only the "uid=jojo" RDN and not the
# complete distinguishedName.  If we ever add remote pseudonyms,
# meaning a pseudonym acknowledged by a foreign domain, then we
# would use something like "uid=jojo@example.org" and not multiple
# RDNs.  Since this is our internal format, we can do such things
# and simplify our software accordingly.
#
# This node is edited by IdentityHub software, which will only
# let administrators for example.com edit it on top of
# john@example.com.
#
dn: uid=john,associatedDomain=example.com,ou=IdentityHub,o=internetwide.org,ou=ServiceDIT
uid: john
objectClass: identityHubUser

# Alias "john+cook" for user "john" is located next to "john".
# Note that the "+" character needs to be escaped as \2b in
# distinguishedName notation.  It need not be interpreted by 
# software (but is still helpful to users), as there is a
# formal link to the original account made with uidAlias.
#
# We will write out the alias' uid in full, simply to avoid the
# need to encode such textual "standards", as well as to remain
# flexible towards the future.
#
# This node is edited by IdentityHub software, which will only
# let administrators for example.com edit it on top of
# john@example.com and john\2bcook@example.com.
#
dn: uid=john\2bcook,associatedDomain=example.com,ou=IdentityHub,o=internetwide.org,ou=ServiceDIT
uid: john\2bcook
objectClass: identityHubUser
uidAlias: cook+john

# User "jojo" is a user on its own, even when it is also a
# pseudonym for user "john".  The pseudonym indicates that
# john can change his username to jojo without further
# authentication, but pseudonyms are not traversed when
# seeking out identities as whom john may pose.
#
# This node is edited by IdentityHub software, which will only
# let administrators for example.com edit it on top of
# jojo@example.com.  Note that john@example.com is not
# authorised to access resources that are accessible to
# jojo@example.com,, unless he changes his identity first or
# while accessing the resource (the web interface may tackle
# that, however).
#
dn: uid=jojo,associatedDomain=example.com,ou=IdentityHub,o=internetwide.org,ou=ServiceDIT
uid: jojo
objectClass: identityHubUser
uidPseudonym: john

# Yet another alias, this time "jojo+beunhaas" for "jojo".
# This particular user object points to a role that it is
# willing to occupy; to be effective, this needs both sides
# to reference each other.
#
dn: uid=jojo\2bbeunhaas,associatedDomain=example.com,ou=IdentityHub,o=internetwide.org,ou=ServiceDIT
uid: jojo+beunhaas
objectClass: identityHubUser
uidRole: codejockeys+reddevil

# The following defines a group "kookgroup", also using a uid
# attribute because it functions like one.  The presence of the
# objectClass "identityHubGroup" indicates that this object is
# not an individual but a group.  It is syntactically correct
# to have such a group without uidMember attributes (unlike the
# groupOfNames definition, strangely).
#
dn: uid=cook,associatedDomain=example.com,ou=IdentityHub,o=internetwide.org,ou=ServiceDIT
uid: cook
objectClass: identityHubGroup

# Members of the aforementioned group, through an alias of the group
dn: uid=cook\2bjohn,associatedDomain=example.com,ou=IdentityHub,o=internetwide.org,ou=ServiceDIT
uid: cook+john
objectClass: identityHubGroup
uidAlias: cook
uidMember: john+cook

dn: uid=cook\2bade,associatedDomain=example.com,ou=IdentityHub,o=internetwide.org,ou=ServiceDIT
uid: cook+ade
objectClass: identityHubGroup
uidAlias: cook
uidMember: a3aan+cook

# The following defines a role "codejockeys", recognised as a role
# through the "identityHubRole" objectClass.  It is syntactically
# correct to define a role with zero "uidOccupant" references.
#
dn: uid=codejockeys,associatedDomain=example.com,ou=IdentityHub,o=internetwide.org,ou=ServiceDIT
uid: codejockeys
objectClass: identityHubRole

# Role occupants of the aforementioned role, through an alias of the role
dn: uid=codejockeys\2bjojo,associatedDomain=example.com,ou=IdentityHub,o=internetwide.org,ou=ServiceDIT
uid: codejockeys+reddevil
objectClass: identityHubRole
uidAlias: codejockeys
uidOccupant: jojo+beunhaas

dn: uid=codejockeys\2ba3aan,associatedDomain=example.com,ou=IdentityHub,o=internetwide.org,ou=ServiceDIT
uid: codejockeys+a3aan
objectClass: identityHubRole
uidAlias: codejockeys
uidOccupant: ade+tinkerbell

# Resources represent a service in a general sense.  We describe one below.
dn: cn=DMZ,associatedDomain=example.com,ou=IdentityHub,o=internetwide.org,ou=ServiceDIT
cn: DMZ
resourceClassUUID: 6B251E30-DF9C-4D62-8F5E-6D3F8CE7F839
objectClass: resourceObject
objectClass: ipNetwork
ipNetworkNumber: 2001:db8:cafe:666::
ipNetmaskNumber: /64
description: Playground for scandalous behaviour
manager: uid=john\2badmin,associatedDomain=example.com,ou=IdentityHub,o=internetwide.org,ou=ServiceDIT

# # Resources are modelled in the Service Directory for their ACLs.
# #
# # TODO: Is this the best place for them?
# #
# # TODO: Is there a generic UUID attribute?
# #       Extension: https://open-systems.ufl.edu/content/uf-ldap-schema
# #       Syntax: http://www.faqs.org/rfcs/rfc4530.html
# #
# dn: resourceUUID=6B251E30-DF9C-4D62-8F5E-6D3F8CE7F839,associatedDomain=example.com,ou=IdentityHub,o=internetwide.org,ou=ServiceDIT
# objectClass: resourceAccessARPA2

# TODO:
#  - resources: here or elsewhere?
#  - resources: ACL attribute + object?
#  - communication: ACL attribute + object?


